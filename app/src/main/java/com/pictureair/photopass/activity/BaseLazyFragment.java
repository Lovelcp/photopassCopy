package com.pictureair.photopass.activity;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import com.pictureair.photopass.R;import com.pictureair.photopass.util.BaiduMobUtil;import com.pictureair.photopass.util.UmengUtil;import com.pictureair.photopass.widget.PWProgressDialog;/** * 懒加载fragment基类 * * @author bauer_bao */public abstract class BaseLazyFragment extends Fragment {    private PWProgressDialog pwProgressDialog;    private Context context;    //用于标记fragment视图是否可见    protected boolean isVisible;    @Override    public void onAttach(Context context) {        super.onAttach(context);        this.context = context;    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        createPWProgressDialog();    }    //在onCreate方法之前调用，用来判断Fragment的UI是否可见    @Override    public void setUserVisibleHint(boolean isVisibleToUser) {        super.setUserVisibleHint(isVisibleToUser);        if (getUserVisibleHint()) {            isVisible = true;            onVisible();        } else {            isVisible = false;            onInvisible();        }    }    @Override    public void onResume() {        // TODO Auto-generated method stub        super.onResume();        //友盟统计        UmengUtil.onResume(this);        BaiduMobUtil.onFragmentResume(this);    }    @Override    public void onPause() {        // TODO Auto-generated method stub        super.onPause();        UmengUtil.onPause(this);        BaiduMobUtil.onFragmentPause(this);    }    @Override    public void onDestroyView() {        super.onDestroyView();        dismissPWProgressDialog();    }    /**     * 视图可见     */    protected void onVisible() {        onLazyLoad();    }    /**     * 自定义抽象加载数据方法     */    protected abstract void onLazyLoad();    /**     * 视图不可见     */    protected void onInvisible() {    }    /**     * dismiss pwProgressDialog     */    protected void dismissPWProgressDialog() {        if (null != pwProgressDialog) {            pwProgressDialog.pwProgressDialogDismiss();        }    }    /**     * show pwProgressDialog     *     * @param message     */    protected void showPWProgressDialog(String message) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(message);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param message     * @param cancelable     */    protected void showPWProgressDialog(String message, boolean cancelable) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(message)                    .setPWProgressDialogCancelable(cancelable);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     */    protected void showPWProgressDialog() {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(R.string.is_loading);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param cancelable     */    protected void showPWProgressDialog(boolean cancelable) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(R.string.is_loading)                    .setPWProgressDialogCancelable(cancelable);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param messageId     */    protected void showPWProgressDialog(int messageId) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(messageId);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param messageId     * @param cancelable     */    protected void showPWProgressDialog(int messageId, boolean cancelable) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(messageId)                    .setPWProgressDialogCancelable(cancelable);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * 创建对话框     */    private void createPWProgressDialog() {        if (null == pwProgressDialog) {//是否为空            pwProgressDialog = new PWProgressDialog(context)                    .pwProgressDialogCreate();        }    }}