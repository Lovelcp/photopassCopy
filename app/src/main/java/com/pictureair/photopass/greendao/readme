GreenDao 解析

1.主项目的build.gradle中添加
    buildscript { 
        repositories { 
            jcenter() 
        } 

        dependencies { 
            classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1' 
        } 
    }

2.modle中的build.gradle中添加

    apply plugin: 'org.greenrobot.greendao'

    compile 'org.greenrobot:greendao:3.2.0'

    greendao { 
        schemaVersion 1
        targetGenDir 'src/main/java'
        daoPackage 'com.pictureair.photopass.greendao'
    }

    * schemaVersion： 数据库schema版本，也可以理解为数据库版本号
    * daoPackage：设置DaoMaster 、DaoSession、Dao包名
    * targetGenDir：设置DaoMaster 、DaoSession、Dao目录
    * targetGenDirTest：设置生成单元测试目录
    * generateTests：设置自动生成单元测试用例

3.创建bean对象

    @Entity 
    public class PhotoBean { 
        @Id 
        private Long id; 
        private String name; 

        @Transient 
        private int tempUsageCount;
    }

    @Entity：make project 的时候，优先查找 @Entity，找到，则创建对应的类
    @Id：主键，自增长
    @NotNul：不能为空
    @Transient：不会在数据库中生成对应的列
    @Property：用于设置属性在数据库中的列名（默认不写就是保持一致）

4.make project，自动生成对应文件

    Bean：自动生成set get方法，封装类
    DaoMaster：主要数据库对 表 的操作
    DaoSession：每个表和DaoMaster连接的桥梁
    BeanDao：每个表实际操作的对象

5.Application中初始化

    private void setDatabase() { 
        //创建表
        DaoMaster.DevOpenHelper mHelper = new DaoMaster.DevOpenHelper(this, "photopass_info.db3");
        //打开对应的数据库，此处应该使用加密的数据库
        Database db = Common.USE_ENCRYPTED_DATABASE ? mHelper.getEncryptedWritableDb(PWJniUtil.getSqlCipherKey(Common.APP_TYPE_SHDRPP)) : mHelper.getWritableDb();
        // 注意：该数据库连接属于 DaoMaster，所以多个 Session 指的是相同的数据库连接。
        mDaoSession = new DaoMaster(db).newSession();
    }

    getEncryptedWritableDb：获取加密数据库
    getWritableDb：获取正常数据库

6.数据库操作

    升级数据库：
        自定义OpenHelper，在OnUpgrade中实现升级操作

    增：
        insert：添加一条数据

    删：
        delete：删除一条数据
        deleteByKey：按照指定列名删除
        deleteAll：删除全部数据
        deleteInTx：使用事务，删除数据

    改：
        update：修改数据, 前提是先按照条件找到对应的对象，再修改这个对象，最后update
        updateInTx：使用事务，更新数据

    查：
        和ppcode类似，并且按照strshooton降序排列，并且返回list。如果多个where条件，where(a, b, c, d)
        (ArrayList) Dao.queryBuilder()
            .where(PhotoInfoDao.Properties.PhotoPassCode.like("%" + ppInfo.getPpCode() + "%"))
            .orderDesc(PhotoInfoDao.Properties.StrShootOn).build().list();
        le：小于
        lt：小于等于
        eq：等于
        notEq：不等于
        gt：大于
        ge：大于等于
        like：相似
        between（a，b）：在a和b之间
        isNull：为空
        isNotNull：不为空
        limit：限制数量
        unique：值返回一条结果
        list：返回列表
        orderDesc：降序
        orderAsc：升序
        queryRaw：使用sql语句 所有字段前面，都要加 T. ，如：T.'IS_PAID'
        StringCondition：使用sql语句自定义where条件
        or(a, b)：或者a或者b
        and(a, b)：a和b
        forCurrentThread：线程安全，在build之后调用，建议和build连用
        setParameter：如果查询条件有变更，可以用此方法设置参数

    注意：
        不支持查找单列，官方回答，greendao已经够快



