package com.pictureair.photopass.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pictureair.photopass.entity.PhotoDownLoadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_DOWN_LOAD_INFO".
*/
public class PhotoDownLoadInfoDao extends AbstractDao<PhotoDownLoadInfo, Long> {

    public static final String TABLENAME = "PHOTO_DOWN_LOAD_INFO";

    /**
     * Properties of entity PhotoDownLoadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhotoId = new Property(1, String.class, "photoId", false, "PHOTO_ID");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Size = new Property(3, long.class, "size", false, "SIZE");
        public final static Property PreviewUrl = new Property(4, String.class, "previewUrl", false, "PREVIEW_URL");
        public final static Property ShootTime = new Property(5, String.class, "shootTime", false, "SHOOT_TIME");
        public final static Property DownLoadTime = new Property(6, String.class, "downLoadTime", false, "DOWN_LOAD_TIME");
        public final static Property FailedTime = new Property(7, String.class, "failedTime", false, "FAILED_TIME");
        public final static Property UserId = new Property(8, String.class, "userId", false, "USER_ID");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property PhotoThumbnail_512 = new Property(10, String.class, "photoThumbnail_512", false, "PHOTO_THUMBNAIL_512");
        public final static Property PhotoThumbnail_1024 = new Property(11, String.class, "photoThumbnail_1024", false, "PHOTO_THUMBNAIL_1024");
        public final static Property VideoWidth = new Property(12, int.class, "videoWidth", false, "VIDEO_WIDTH");
        public final static Property VideoHeight = new Property(13, int.class, "videoHeight", false, "VIDEO_HEIGHT");
        public final static Property IsVideo = new Property(14, int.class, "isVideo", false, "IS_VIDEO");
        public final static Property ReadLength = new Property(15, long.class, "readLength", false, "READ_LENGTH");
    }


    public PhotoDownLoadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoDownLoadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_DOWN_LOAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHOTO_ID\" TEXT," + // 1: photoId
                "\"URL\" TEXT," + // 2: url
                "\"SIZE\" INTEGER NOT NULL ," + // 3: size
                "\"PREVIEW_URL\" TEXT," + // 4: previewUrl
                "\"SHOOT_TIME\" TEXT," + // 5: shootTime
                "\"DOWN_LOAD_TIME\" TEXT," + // 6: downLoadTime
                "\"FAILED_TIME\" TEXT," + // 7: failedTime
                "\"USER_ID\" TEXT," + // 8: userId
                "\"STATUS\" TEXT," + // 9: status
                "\"PHOTO_THUMBNAIL_512\" TEXT," + // 10: photoThumbnail_512
                "\"PHOTO_THUMBNAIL_1024\" TEXT," + // 11: photoThumbnail_1024
                "\"VIDEO_WIDTH\" INTEGER NOT NULL ," + // 12: videoWidth
                "\"VIDEO_HEIGHT\" INTEGER NOT NULL ," + // 13: videoHeight
                "\"IS_VIDEO\" INTEGER NOT NULL ," + // 14: isVideo
                "\"READ_LENGTH\" INTEGER NOT NULL );"); // 15: readLength
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_DOWN_LOAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoDownLoadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(2, photoId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getSize());
 
        String previewUrl = entity.getPreviewUrl();
        if (previewUrl != null) {
            stmt.bindString(5, previewUrl);
        }
 
        String shootTime = entity.getShootTime();
        if (shootTime != null) {
            stmt.bindString(6, shootTime);
        }
 
        String downLoadTime = entity.getDownLoadTime();
        if (downLoadTime != null) {
            stmt.bindString(7, downLoadTime);
        }
 
        String failedTime = entity.getFailedTime();
        if (failedTime != null) {
            stmt.bindString(8, failedTime);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String photoThumbnail_512 = entity.getPhotoThumbnail_512();
        if (photoThumbnail_512 != null) {
            stmt.bindString(11, photoThumbnail_512);
        }
 
        String photoThumbnail_1024 = entity.getPhotoThumbnail_1024();
        if (photoThumbnail_1024 != null) {
            stmt.bindString(12, photoThumbnail_1024);
        }
        stmt.bindLong(13, entity.getVideoWidth());
        stmt.bindLong(14, entity.getVideoHeight());
        stmt.bindLong(15, entity.getIsVideo());
        stmt.bindLong(16, entity.getReadLength());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoDownLoadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(2, photoId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
        stmt.bindLong(4, entity.getSize());
 
        String previewUrl = entity.getPreviewUrl();
        if (previewUrl != null) {
            stmt.bindString(5, previewUrl);
        }
 
        String shootTime = entity.getShootTime();
        if (shootTime != null) {
            stmt.bindString(6, shootTime);
        }
 
        String downLoadTime = entity.getDownLoadTime();
        if (downLoadTime != null) {
            stmt.bindString(7, downLoadTime);
        }
 
        String failedTime = entity.getFailedTime();
        if (failedTime != null) {
            stmt.bindString(8, failedTime);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String photoThumbnail_512 = entity.getPhotoThumbnail_512();
        if (photoThumbnail_512 != null) {
            stmt.bindString(11, photoThumbnail_512);
        }
 
        String photoThumbnail_1024 = entity.getPhotoThumbnail_1024();
        if (photoThumbnail_1024 != null) {
            stmt.bindString(12, photoThumbnail_1024);
        }
        stmt.bindLong(13, entity.getVideoWidth());
        stmt.bindLong(14, entity.getVideoHeight());
        stmt.bindLong(15, entity.getIsVideo());
        stmt.bindLong(16, entity.getReadLength());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoDownLoadInfo readEntity(Cursor cursor, int offset) {
        PhotoDownLoadInfo entity = new PhotoDownLoadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.getLong(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // previewUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shootTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // downLoadTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // failedTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photoThumbnail_512
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // photoThumbnail_1024
            cursor.getInt(offset + 12), // videoWidth
            cursor.getInt(offset + 13), // videoHeight
            cursor.getInt(offset + 14), // isVideo
            cursor.getLong(offset + 15) // readLength
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoDownLoadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhotoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.getLong(offset + 3));
        entity.setPreviewUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShootTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDownLoadTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFailedTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhotoThumbnail_512(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhotoThumbnail_1024(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVideoWidth(cursor.getInt(offset + 12));
        entity.setVideoHeight(cursor.getInt(offset + 13));
        entity.setIsVideo(cursor.getInt(offset + 14));
        entity.setReadLength(cursor.getLong(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoDownLoadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoDownLoadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoDownLoadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
