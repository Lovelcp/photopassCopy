package com.pictureair.photopassCopy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pictureair.photopassCopy.entity.FrameOrStikerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRAME_OR_STIKER_INFO".
*/
public class FrameOrStikerInfoDao extends AbstractDao<FrameOrStikerInfo, Long> {

    public static final String TABLENAME = "FRAME_OR_STIKER_INFO";

    /**
     * Properties of entity FrameOrStikerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FrameName = new Property(1, String.class, "frameName", false, "FRAME_NAME");
        public final static Property OriginalPathLandscape = new Property(2, String.class, "originalPathLandscape", false, "ORIGINAL_PATH_LANDSCAPE");
        public final static Property OriginalPathPortrait = new Property(3, String.class, "originalPathPortrait", false, "ORIGINAL_PATH_PORTRAIT");
        public final static Property ThumbnailPathLandscape400 = new Property(4, String.class, "thumbnailPathLandscape400", false, "THUMBNAIL_PATH_LANDSCAPE400");
        public final static Property ThumbnailPathPortrait400 = new Property(5, String.class, "thumbnailPathPortrait400", false, "THUMBNAIL_PATH_PORTRAIT400");
        public final static Property ThumbnailPathH160 = new Property(6, String.class, "thumbnailPathH160", false, "THUMBNAIL_PATH_H160");
        public final static Property ThumbnailPathV160 = new Property(7, String.class, "thumbnailPathV160", false, "THUMBNAIL_PATH_V160");
        public final static Property LocationId = new Property(8, String.class, "locationId", false, "LOCATION_ID");
        public final static Property IsActive = new Property(9, int.class, "isActive", false, "IS_ACTIVE");
        public final static Property OnLine = new Property(10, int.class, "onLine", false, "ON_LINE");
        public final static Property IsDownload = new Property(11, int.class, "isDownload", false, "IS_DOWNLOAD");
        public final static Property FileSize = new Property(12, int.class, "fileSize", false, "FILE_SIZE");
        public final static Property FileType = new Property(13, int.class, "fileType", false, "FILE_TYPE");
    }


    public FrameOrStikerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FrameOrStikerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRAME_OR_STIKER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FRAME_NAME\" TEXT," + // 1: frameName
                "\"ORIGINAL_PATH_LANDSCAPE\" TEXT," + // 2: originalPathLandscape
                "\"ORIGINAL_PATH_PORTRAIT\" TEXT," + // 3: originalPathPortrait
                "\"THUMBNAIL_PATH_LANDSCAPE400\" TEXT," + // 4: thumbnailPathLandscape400
                "\"THUMBNAIL_PATH_PORTRAIT400\" TEXT," + // 5: thumbnailPathPortrait400
                "\"THUMBNAIL_PATH_H160\" TEXT," + // 6: thumbnailPathH160
                "\"THUMBNAIL_PATH_V160\" TEXT," + // 7: thumbnailPathV160
                "\"LOCATION_ID\" TEXT," + // 8: locationId
                "\"IS_ACTIVE\" INTEGER NOT NULL ," + // 9: isActive
                "\"ON_LINE\" INTEGER NOT NULL ," + // 10: onLine
                "\"IS_DOWNLOAD\" INTEGER NOT NULL ," + // 11: isDownload
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 12: fileSize
                "\"FILE_TYPE\" INTEGER NOT NULL );"); // 13: fileType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRAME_OR_STIKER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FrameOrStikerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String frameName = entity.getFrameName();
        if (frameName != null) {
            stmt.bindString(2, frameName);
        }
 
        String originalPathLandscape = entity.getOriginalPathLandscape();
        if (originalPathLandscape != null) {
            stmt.bindString(3, originalPathLandscape);
        }
 
        String originalPathPortrait = entity.getOriginalPathPortrait();
        if (originalPathPortrait != null) {
            stmt.bindString(4, originalPathPortrait);
        }
 
        String thumbnailPathLandscape400 = entity.getThumbnailPathLandscape400();
        if (thumbnailPathLandscape400 != null) {
            stmt.bindString(5, thumbnailPathLandscape400);
        }
 
        String thumbnailPathPortrait400 = entity.getThumbnailPathPortrait400();
        if (thumbnailPathPortrait400 != null) {
            stmt.bindString(6, thumbnailPathPortrait400);
        }
 
        String thumbnailPathH160 = entity.getThumbnailPathH160();
        if (thumbnailPathH160 != null) {
            stmt.bindString(7, thumbnailPathH160);
        }
 
        String thumbnailPathV160 = entity.getThumbnailPathV160();
        if (thumbnailPathV160 != null) {
            stmt.bindString(8, thumbnailPathV160);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(9, locationId);
        }
        stmt.bindLong(10, entity.getIsActive());
        stmt.bindLong(11, entity.getOnLine());
        stmt.bindLong(12, entity.getIsDownload());
        stmt.bindLong(13, entity.getFileSize());
        stmt.bindLong(14, entity.getFileType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FrameOrStikerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String frameName = entity.getFrameName();
        if (frameName != null) {
            stmt.bindString(2, frameName);
        }
 
        String originalPathLandscape = entity.getOriginalPathLandscape();
        if (originalPathLandscape != null) {
            stmt.bindString(3, originalPathLandscape);
        }
 
        String originalPathPortrait = entity.getOriginalPathPortrait();
        if (originalPathPortrait != null) {
            stmt.bindString(4, originalPathPortrait);
        }
 
        String thumbnailPathLandscape400 = entity.getThumbnailPathLandscape400();
        if (thumbnailPathLandscape400 != null) {
            stmt.bindString(5, thumbnailPathLandscape400);
        }
 
        String thumbnailPathPortrait400 = entity.getThumbnailPathPortrait400();
        if (thumbnailPathPortrait400 != null) {
            stmt.bindString(6, thumbnailPathPortrait400);
        }
 
        String thumbnailPathH160 = entity.getThumbnailPathH160();
        if (thumbnailPathH160 != null) {
            stmt.bindString(7, thumbnailPathH160);
        }
 
        String thumbnailPathV160 = entity.getThumbnailPathV160();
        if (thumbnailPathV160 != null) {
            stmt.bindString(8, thumbnailPathV160);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(9, locationId);
        }
        stmt.bindLong(10, entity.getIsActive());
        stmt.bindLong(11, entity.getOnLine());
        stmt.bindLong(12, entity.getIsDownload());
        stmt.bindLong(13, entity.getFileSize());
        stmt.bindLong(14, entity.getFileType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FrameOrStikerInfo readEntity(Cursor cursor, int offset) {
        FrameOrStikerInfo entity = new FrameOrStikerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // frameName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // originalPathLandscape
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // originalPathPortrait
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thumbnailPathLandscape400
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbnailPathPortrait400
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thumbnailPathH160
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // thumbnailPathV160
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // locationId
            cursor.getInt(offset + 9), // isActive
            cursor.getInt(offset + 10), // onLine
            cursor.getInt(offset + 11), // isDownload
            cursor.getInt(offset + 12), // fileSize
            cursor.getInt(offset + 13) // fileType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FrameOrStikerInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrameName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOriginalPathLandscape(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOriginalPathPortrait(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumbnailPathLandscape400(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbnailPathPortrait400(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThumbnailPathH160(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThumbnailPathV160(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocationId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsActive(cursor.getInt(offset + 9));
        entity.setOnLine(cursor.getInt(offset + 10));
        entity.setIsDownload(cursor.getInt(offset + 11));
        entity.setFileSize(cursor.getInt(offset + 12));
        entity.setFileType(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FrameOrStikerInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FrameOrStikerInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FrameOrStikerInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
