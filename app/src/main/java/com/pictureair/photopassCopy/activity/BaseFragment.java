package com.pictureair.photopassCopy.activity;import android.content.Context;import android.os.Build;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.View;import android.view.ViewGroup;import com.pictureair.photopassCopy.R;import com.pictureair.photopassCopy.util.BaiduMobUtil;import com.pictureair.photopassCopy.util.PictureAirLog;import com.pictureair.photopassCopy.util.ScreenUtil;import com.pictureair.photopassCopy.util.UmengUtil;import com.pictureair.photopassCopy.widget.PWProgressDialog;import com.trello.rxlifecycle.components.support.RxFragment;/** * fragment基类 * * @author milo 2015-11-20 */public class BaseFragment extends RxFragment {    private PWProgressDialog pwProgressDialog;    private Context context;    private View statusView;    @Override    public void onAttach(Context context) {        super.onAttach(context);        this.context = context;    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        createPWProgressDialog();    }    /**     * 设置沉浸式状态栏     * 因为一个activity含有多个fragment，并且有一个需要把UI放在状态栏的下面，因此使用额外控件去占位     */    protected void setImmersiveMode(View view) {        PictureAirLog.d("set immersive mode");        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {            return;        }        statusView = view.findViewById(R.id.status_bar_empty_view);        if (statusView != null) {            ViewGroup.LayoutParams params = statusView.getLayoutParams();            params.height = ScreenUtil.getStatusBarHeight(context);            statusView.setLayoutParams(params);            statusView.setVisibility(View.VISIBLE);        }    }    @Override    public void onResume() {        // TODO Auto-generated method stub        super.onResume();        //友盟统计        UmengUtil.onResume(this);        BaiduMobUtil.onFragmentResume(this);    }    @Override    public void onPause() {        // TODO Auto-generated method stub        super.onPause();        UmengUtil.onPause(this);        BaiduMobUtil.onFragmentPause(this);    }    @Override    public void onDestroyView() {        super.onDestroyView();        dismissPWProgressDialog();    }    /**     * dismiss pwProgressDialog     */    protected void dismissPWProgressDialog() {        if (null != pwProgressDialog) {            pwProgressDialog.pwProgressDialogDismiss();        }    }    /**     * show pwProgressDialog     *     * @param message     */    protected void showPWProgressDialog(String message) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(message);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param message     * @param cancelable     */    protected void showPWProgressDialog(String message, boolean cancelable) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(message)                    .setPWProgressDialogCancelable(cancelable);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     */    protected void showPWProgressDialog() {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(R.string.is_loading);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param cancelable     */    protected void showPWProgressDialog(boolean cancelable) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(R.string.is_loading)                    .setPWProgressDialogCancelable(cancelable);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param messageId     */    protected void showPWProgressDialog(int messageId) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(messageId);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * show pwProgressDialog     *     * @param messageId     * @param cancelable     */    protected void showPWProgressDialog(int messageId, boolean cancelable) {        createPWProgressDialog();        if (null != pwProgressDialog) {//更新message            pwProgressDialog.setPWProgressDialogMessage(messageId)                    .setPWProgressDialogCancelable(cancelable);        }        pwProgressDialog.pwProgressDialogShow();    }    /**     * 创建对话框     */    private void createPWProgressDialog() {        if (null == pwProgressDialog) {//是否为空            pwProgressDialog = new PWProgressDialog(context)                    .pwProgressDialogCreate();        }    }}