package com.pictureair.hkdlphotopass.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pictureair.hkdlphotopass.entity.PhotoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_INFO".
*/
public class PhotoInfoDao extends AbstractDao<PhotoInfo, Long> {

    public static final String TABLENAME = "PHOTO_INFO";

    /**
     * Properties of entity PhotoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhotoId = new Property(1, String.class, "photoId", false, "PHOTO_ID");
        public final static Property PhotoPassCode = new Property(2, String.class, "photoPassCode", false, "PHOTO_PASS_CODE");
        public final static Property ShootDate = new Property(3, String.class, "shootDate", false, "SHOOT_DATE");
        public final static Property PhotoThumbnail_128 = new Property(4, String.class, "photoThumbnail_128", false, "PHOTO_THUMBNAIL_128");
        public final static Property PhotoThumbnail_512 = new Property(5, String.class, "photoThumbnail_512", false, "PHOTO_THUMBNAIL_512");
        public final static Property PhotoThumbnail_1024 = new Property(6, String.class, "photoThumbnail_1024", false, "PHOTO_THUMBNAIL_1024");
        public final static Property PhotoOriginalURL = new Property(7, String.class, "photoOriginalURL", false, "PHOTO_ORIGINAL_URL");
        public final static Property LocationId = new Property(8, String.class, "locationId", false, "LOCATION_ID");
        public final static Property StrShootOn = new Property(9, String.class, "strShootOn", false, "STR_SHOOT_ON");
        public final static Property ShareURL = new Property(10, String.class, "shareURL", false, "SHARE_URL");
        public final static Property AdURL = new Property(11, String.class, "adURL", false, "AD_URL");
        public final static Property ReceivedOn = new Property(12, String.class, "receivedOn", false, "RECEIVED_ON");
        public final static Property ExipreDate = new Property(13, String.class, "exipreDate", false, "EXIPRE_DATE");
        public final static Property IsPaid = new Property(14, int.class, "isPaid", false, "IS_PAID");
        public final static Property IsVideo = new Property(15, int.class, "isVideo", false, "IS_VIDEO");
        public final static Property IsPreset = new Property(16, int.class, "isPreset", false, "IS_PRESET");
        public final static Property IsEnImage = new Property(17, int.class, "isEnImage", false, "IS_EN_IMAGE");
        public final static Property IsOnLine = new Property(18, int.class, "isOnLine", false, "IS_ON_LINE");
        public final static Property FileSize = new Property(19, int.class, "fileSize", false, "FILE_SIZE");
        public final static Property VideoWidth = new Property(20, int.class, "videoWidth", false, "VIDEO_WIDTH");
        public final static Property VideoHeight = new Property(21, int.class, "videoHeight", false, "VIDEO_HEIGHT");
        public final static Property SiteId = new Property(22, String.class, "siteId", false, "SITE_ID");
    }


    public PhotoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHOTO_ID\" TEXT," + // 1: photoId
                "\"PHOTO_PASS_CODE\" TEXT," + // 2: photoPassCode
                "\"SHOOT_DATE\" TEXT," + // 3: shootDate
                "\"PHOTO_THUMBNAIL_128\" TEXT," + // 4: photoThumbnail_128
                "\"PHOTO_THUMBNAIL_512\" TEXT," + // 5: photoThumbnail_512
                "\"PHOTO_THUMBNAIL_1024\" TEXT," + // 6: photoThumbnail_1024
                "\"PHOTO_ORIGINAL_URL\" TEXT," + // 7: photoOriginalURL
                "\"LOCATION_ID\" TEXT," + // 8: locationId
                "\"STR_SHOOT_ON\" TEXT," + // 9: strShootOn
                "\"SHARE_URL\" TEXT," + // 10: shareURL
                "\"AD_URL\" TEXT," + // 11: adURL
                "\"RECEIVED_ON\" TEXT," + // 12: receivedOn
                "\"EXIPRE_DATE\" TEXT," + // 13: exipreDate
                "\"IS_PAID\" INTEGER NOT NULL ," + // 14: isPaid
                "\"IS_VIDEO\" INTEGER NOT NULL ," + // 15: isVideo
                "\"IS_PRESET\" INTEGER NOT NULL ," + // 16: isPreset
                "\"IS_EN_IMAGE\" INTEGER NOT NULL ," + // 17: isEnImage
                "\"IS_ON_LINE\" INTEGER NOT NULL ," + // 18: isOnLine
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 19: fileSize
                "\"VIDEO_WIDTH\" INTEGER NOT NULL ," + // 20: videoWidth
                "\"VIDEO_HEIGHT\" INTEGER NOT NULL ," + // 21: videoHeight
                "\"SITE_ID\" TEXT);"); // 22: siteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(2, photoId);
        }
 
        String photoPassCode = entity.getPhotoPassCode();
        if (photoPassCode != null) {
            stmt.bindString(3, photoPassCode);
        }
 
        String shootDate = entity.getShootDate();
        if (shootDate != null) {
            stmt.bindString(4, shootDate);
        }
 
        String photoThumbnail_128 = entity.getPhotoThumbnail_128();
        if (photoThumbnail_128 != null) {
            stmt.bindString(5, photoThumbnail_128);
        }
 
        String photoThumbnail_512 = entity.getPhotoThumbnail_512();
        if (photoThumbnail_512 != null) {
            stmt.bindString(6, photoThumbnail_512);
        }
 
        String photoThumbnail_1024 = entity.getPhotoThumbnail_1024();
        if (photoThumbnail_1024 != null) {
            stmt.bindString(7, photoThumbnail_1024);
        }
 
        String photoOriginalURL = entity.getPhotoOriginalURL();
        if (photoOriginalURL != null) {
            stmt.bindString(8, photoOriginalURL);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(9, locationId);
        }
 
        String strShootOn = entity.getStrShootOn();
        if (strShootOn != null) {
            stmt.bindString(10, strShootOn);
        }
 
        String shareURL = entity.getShareURL();
        if (shareURL != null) {
            stmt.bindString(11, shareURL);
        }
 
        String adURL = entity.getAdURL();
        if (adURL != null) {
            stmt.bindString(12, adURL);
        }
 
        String receivedOn = entity.getReceivedOn();
        if (receivedOn != null) {
            stmt.bindString(13, receivedOn);
        }
 
        String exipreDate = entity.getExipreDate();
        if (exipreDate != null) {
            stmt.bindString(14, exipreDate);
        }
        stmt.bindLong(15, entity.getIsPaid());
        stmt.bindLong(16, entity.getIsVideo());
        stmt.bindLong(17, entity.getIsPreset());
        stmt.bindLong(18, entity.getIsEnImage());
        stmt.bindLong(19, entity.getIsOnLine());
        stmt.bindLong(20, entity.getFileSize());
        stmt.bindLong(21, entity.getVideoWidth());
        stmt.bindLong(22, entity.getVideoHeight());
 
        String siteId = entity.getSiteId();
        if (siteId != null) {
            stmt.bindString(23, siteId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindString(2, photoId);
        }
 
        String photoPassCode = entity.getPhotoPassCode();
        if (photoPassCode != null) {
            stmt.bindString(3, photoPassCode);
        }
 
        String shootDate = entity.getShootDate();
        if (shootDate != null) {
            stmt.bindString(4, shootDate);
        }
 
        String photoThumbnail_128 = entity.getPhotoThumbnail_128();
        if (photoThumbnail_128 != null) {
            stmt.bindString(5, photoThumbnail_128);
        }
 
        String photoThumbnail_512 = entity.getPhotoThumbnail_512();
        if (photoThumbnail_512 != null) {
            stmt.bindString(6, photoThumbnail_512);
        }
 
        String photoThumbnail_1024 = entity.getPhotoThumbnail_1024();
        if (photoThumbnail_1024 != null) {
            stmt.bindString(7, photoThumbnail_1024);
        }
 
        String photoOriginalURL = entity.getPhotoOriginalURL();
        if (photoOriginalURL != null) {
            stmt.bindString(8, photoOriginalURL);
        }
 
        String locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindString(9, locationId);
        }
 
        String strShootOn = entity.getStrShootOn();
        if (strShootOn != null) {
            stmt.bindString(10, strShootOn);
        }
 
        String shareURL = entity.getShareURL();
        if (shareURL != null) {
            stmt.bindString(11, shareURL);
        }
 
        String adURL = entity.getAdURL();
        if (adURL != null) {
            stmt.bindString(12, adURL);
        }
 
        String receivedOn = entity.getReceivedOn();
        if (receivedOn != null) {
            stmt.bindString(13, receivedOn);
        }
 
        String exipreDate = entity.getExipreDate();
        if (exipreDate != null) {
            stmt.bindString(14, exipreDate);
        }
        stmt.bindLong(15, entity.getIsPaid());
        stmt.bindLong(16, entity.getIsVideo());
        stmt.bindLong(17, entity.getIsPreset());
        stmt.bindLong(18, entity.getIsEnImage());
        stmt.bindLong(19, entity.getIsOnLine());
        stmt.bindLong(20, entity.getFileSize());
        stmt.bindLong(21, entity.getVideoWidth());
        stmt.bindLong(22, entity.getVideoHeight());
 
        String siteId = entity.getSiteId();
        if (siteId != null) {
            stmt.bindString(23, siteId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoInfo readEntity(Cursor cursor, int offset) {
        PhotoInfo entity = new PhotoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // photoPassCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shootDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // photoThumbnail_128
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photoThumbnail_512
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photoThumbnail_1024
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photoOriginalURL
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // locationId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // strShootOn
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // shareURL
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // adURL
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // receivedOn
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // exipreDate
            cursor.getInt(offset + 14), // isPaid
            cursor.getInt(offset + 15), // isVideo
            cursor.getInt(offset + 16), // isPreset
            cursor.getInt(offset + 17), // isEnImage
            cursor.getInt(offset + 18), // isOnLine
            cursor.getInt(offset + 19), // fileSize
            cursor.getInt(offset + 20), // videoWidth
            cursor.getInt(offset + 21), // videoHeight
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // siteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhotoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhotoPassCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShootDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhotoThumbnail_128(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhotoThumbnail_512(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhotoThumbnail_1024(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhotoOriginalURL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocationId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStrShootOn(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShareURL(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAdURL(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReceivedOn(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExipreDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsPaid(cursor.getInt(offset + 14));
        entity.setIsVideo(cursor.getInt(offset + 15));
        entity.setIsPreset(cursor.getInt(offset + 16));
        entity.setIsEnImage(cursor.getInt(offset + 17));
        entity.setIsOnLine(cursor.getInt(offset + 18));
        entity.setFileSize(cursor.getInt(offset + 19));
        entity.setVideoWidth(cursor.getInt(offset + 20));
        entity.setVideoHeight(cursor.getInt(offset + 21));
        entity.setSiteId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
